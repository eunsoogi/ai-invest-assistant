---
name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - version

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Versioning
        id: version
        run: |
          echo "version=$(cat version)" >> $GITHUB_OUTPUT

      - name: Make cache directories
        run: |
          mkdir -p api/.npm
          mkdir -p api/node_modules
          mkdir -p ui/.npm
          mkdir -p ui/node_modules
          mkdir -p ui/.next/cache

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            **/.npm
            **/node_modules
            **/.next/cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/bake-action@v5
        env:
          BUILD_TARGET: production
          IMAGE_REGISTRY: ghcr.io/eunsoogi
          IMAGE_NAME_PREFIX: kkalla
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        with:
          push: true
          set: |
            api.cache-from=type=registry,ref=ghcr.io/eunsoogi/kkalla-api:cache
            api.cache-to=type=registry,ref=ghcr.io/eunsoogi/kkalla-api:cache,mode=max
            ui.cache-from=type=registry,ref=ghcr.io/eunsoogi/kkalla-ui:cache
            ui.cache-to=type=registry,ref=ghcr.io/eunsoogi/kkalla-ui:cache,mode=max

  cache:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Make cache directories
        run: |
          mkdir -p api/.npm
          mkdir -p api/node_modules
          mkdir -p ui/.npm
          mkdir -p ui/node_modules
          mkdir -p ui/.next/cache

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.next/cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Export build cache
        uses: docker/bake-action@v5
        with:
          targets: cache
          set: |
            cache-api.cache-from=type=registry,ref=ghcr.io/eunsoogi/kkalla-api:cache
            cache-api.output=type=local,dest=api
            cache-ui.cache-from=type=registry,ref=ghcr.io/eunsoogi/kkalla-ui:cache
            cache-ui.output=type=local,dest=ui

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Versioning
        id: version
        run: |
          echo "version=$(cat version)" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true

  deploy:
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: latest

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Setup Helm secrets
        run: |
          cat > secrets.yaml << 'EOL'
          ---
          auth:
            db: &db
              password: ${{ secrets.DB_PASSWORD }}
              rootPassword: ${{ secrets.DB_ROOT_PASSWORD }}
            google: &google
              id: ${{ secrets.GOOGLE_CLIENT_ID }}
              secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}

          mariadb:
            auth: *db
          api:
            db: *db
            auth:
              google: *google
            openai:
              secretKey: ${{ secrets.OPENAI_SECRET_KEY }}
            upbit:
              accessKey: ${{ secrets.UPBIT_ACCESS_KEY }}
              secretKey: ${{ secrets.UPBIT_SECRET_KEY }}
          ui:
            publicUrl: ${{ vars.PUBLIC_URL }}
            auth:
              google: *google
          EOL

      - name: Deploy Helm chart
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USER: ${{ vars.EC2_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          make install ENV=production

      - name: Cleanup unused images
        if: always()
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo crictl rmi --prune
